package client_test

import (
	"encoding/hex"
	"fmt"
	"sync"
	"testing"
	"time"

	// "github.com/cosmos/cosmos-sdk/crypto/keyring"
	"github.com/JFJun/go-substrate-crypto/ss58"
	"github.com/cometbft/cometbft/crypto"
	cryptotypes "github.com/cosmos/cosmos-sdk/crypto/types"
	"github.com/cosmos/cosmos-sdk/types"
	txtypes "github.com/cosmos/cosmos-sdk/types/tx"
	xDistributionType "github.com/cosmos/cosmos-sdk/x/distribution/types"
	xStakingType "github.com/cosmos/cosmos-sdk/x/staking/types"
	"github.com/sirupsen/logrus"
	hubClient "github.com/stafihub/cosmos-relay-sdk/client"
	"github.com/stafihub/rtoken-relay-core/common/core"
	"github.com/stafihub/rtoken-relay-core/common/log"
	"github.com/stretchr/testify/assert"
)

var client *hubClient.Client

func initClient() {
	// key, err := keyring.New(types.KeyringServiceName(), keyring.BackendFile, "/Users/tpkeeper/.gaia", strings.NewReader("tpkeeper\n"))
	// if err != nil {
	// 	panic(err)
	// }

	var err error
	// client, err = hubClient.NewClient(nil, "", "", "cosmos", []string{"https://cosmos-rpc1.stafi.io:443", "https://test-cosmos-rpc1.stafihub.io:443", "https://test-cosmos-rpc1.stafihub.io:443"})
	// client, err = hubClient.NewClient(nil, "", "", "cosmos", []string{"https://rpc-cosmoshub.keplr.app:443"},log.NewLog("client", "cosmos"))
	// client, err = hubClient.NewClient(nil, "", "", "cosmos", []string{"https://cosmos-rpc1.stafi.io:443"})
	// client, err = hubClient.NewClient(nil, "", "", "uhuahua", []string{"https://test-chihuahua-rpc1.stafihub.io:443"})
	// client, err = hubClient.NewClient(nil, "", "", "cosmos", []string{"https://test-cosmos-rpc1.stafihub.io:443"})
	// client, err = hubClient.NewClient(nil, "", "", "cosmos", []string{"https://cosmos-rpc1.stafi.io:443"}, log.NewLog("client", "cosmos"))
	logrus.SetLevel(logrus.TraceLevel)
	// client, err = hubClient.NewClient(nil, "", "", "iris", []string{"https://iris-rpc1.stafihub.io:443"}, log.NewLog("client", "cosmos"))
	// client, err = hubClient.NewClient(nil, "", "", "cosmos", []string{"https://mainnet-rpc.wetez.io:443/cosmos/tendermint/v1/601083a01bf2f40729c5f75e62042208"}, log.NewLog("client", "cosmos"))
	// client, err = hubClient.NewClient(nil, "", "", "cosmos", []string{"https://rpc.cosmos.network:443"}, log.NewLog("client", "cosmos"))
	// client, err = hubClient.NewClient(nil, "", "", "swth", []string{"https://tm-api.carbon.network:443"}, log.NewLog("client", "carbon"))
	// client, err = hubClient.NewClient(nil, "", "", "swth", []string{"https://carbon-rpc.stafi.io:443"}, log.NewLog("client", "carbon"))
	// client, err = hubClient.NewClient(nil, "", "", "uhuahua", []string{"https://chihuahua-private-rpc1.stafihub.io:443"}, log.NewLog("client", "chihuahua"))
	// client, err = hubClient.NewClient(nil, "", "", "stafi", []string{"https://test-rpc1.stafihub.io:443"}, log.NewLog("client", "stafihub dev"))
	client, err = hubClient.NewClient(nil, "", "", "stafi", []string{"https://dev-rpc1.stafihub.io:443"})
	// client, err = hubClient.NewClient(nil, "", "", "ufis", []string{"https://public-rpc1.stafihub.io:443"}, log.NewLog("client", "stafihub main"))
	// client, err = hubClient.NewClient(key, "key1", "0.000000001stake", "cosmos", []string{"http://127.0.0.1:16657"})
	if err != nil {
		panic(err)
	}
}

func TestQueryBlock(t *testing.T) {
	initClient()

	init := int64(21164251)
	end := int64(21164261)
	initBlock, _ := client.QueryBlock(init)
	endBlock, _ := client.QueryBlock(end)
	t.Log("init height", init, "timestamp", initBlock.Block.Header.Time.Unix())
	t.Log("end height", end, "timestamp", endBlock.Block.Header.Time.Unix())
	t.Log(initBlock.Block.Header.Time.Unix() - endBlock.Block.Time.Unix())
	du := (initBlock.Block.Header.Time.Unix() - endBlock.Block.Time.Unix()) * 1000 / (init - end)
	t.Log(du)
}

func TestClient_GetHeightByEra(t *testing.T) {
	initClient()
	height, err := client.GetHeightByEra(19476, 86700, 0)
	assert.NoError(t, err)
	t.Log(height)
}

func TestClient_GetHeightByTimestamp(t *testing.T) {
	initClient()
	height, err := client.GetHeightByTimestamp(1681971900)
	assert.NoError(t, err)
	t.Log(height)
}

func TestQuerySignInfo(t *testing.T) {
	initClient()

	validator, err := client.QueryValidator("stafivaloper1yadulh67pu0y8xqy9kkeajjjhppfm384kczwsv", 0)
	if err != nil {
		t.Fatal(err)
	}

	consPubkeyJson, err := client.Ctx().Codec.MarshalJSON(validator.Validator.ConsensusPubkey)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(consPubkeyJson))
	var pk cryptotypes.PubKey

	if err := client.Ctx().Codec.UnmarshalInterfaceJSON(consPubkeyJson, &pk); err != nil {
		t.Fatal(err)
	}

	consAddr := types.ConsAddress(pk.Address())

	signingInfo, err := client.QuerySigningInfo(consAddr.String(), 0)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(signingInfo)

}

func TestClient_QueryTxByHash(t *testing.T) {
	initClient()

	res, err := client.QueryTxByHash("C7F7A80929B80D2BCD5597FEF65469F0FAF9C2B05723B8540109790099AF035F")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(res.String())
	tx := res.GetTx()
	sig, ok := tx.(*txtypes.Tx)
	if !ok {
		t.Fatal(ok)
	}

	t.Log(sig.GetSignatures())

	curBlock, err := client.GetCurrentBlockHeight()
	assert.NoError(t, err)
	t.Log(curBlock)

}

func TestClient_GetEvent(t *testing.T) {
	initClient()
	// tx, err := client.GetBlockTxsWithParseErrSkip(11845451)
	// if err != nil {
	// 	t.Fatal(err)
	// }
	// t.Log(tx)
	t.Log(types.AccAddress(crypto.AddressHash([]byte("distribution"))).String())

	blockResults, err := client.GetBlockResults(12415487)
	if err != nil {
		t.Fatal(err)
	}
	for _, event := range blockResults.BeginBlockEvents {
		t.Log(types.StringifyEvent(event))
	}

	for i, tx := range blockResults.TxsResults {
		if i != 5 {
			continue
		}
		t.Log("----------", tx.Log)
		for _, e := range tx.Events {
			evt := types.StringifyEvent(e)
			t.Log(evt.Type, evt.Attributes)
		}
	}

	for _, event := range blockResults.EndBlockEvents {
		t.Log(types.StringifyEvent(event))
	}
	// txHash, height, memo, err := client.GetLastTxIncludeWithdraw("cosmos12yprrdprzat35zhqxe2fcnn3u26gwlt6xcq0pj")

	// if err != nil {
	// 	t.Fatal(err)
	// }
	// t.Log(txHash, memo, height)
	// client.SetAccountPrefix("terra")
	// txs, err := client.GetTxs(
	// 	[]string{
	// 		fmt.Sprintf("transfer.recipient='%s'", "cosmos12yprrdprzat35zhqxe2fcnn3u26gwlt6xcq0pj"),
	// 		fmt.Sprintf("transfer.sender='%s'", "cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"),
	// 	}, 1, 2, "desc")
	// if err != nil {
	// 	t.Fatal(err)
	// }
	// for _, tx := range txs.Txs {
	// 	t.Logf("%s %d", tx.TxHash, tx.Height)
	// }

}

func TestParseTxs(t *testing.T) {
	initClient()

	filter := []string{fmt.Sprintf("transfer.recipient='%s'", "cosmos1zae7esjpkn6h35dftth6qkgc59dcrg9t079mv6"), "message.module='bank'"}
	txs, err := client.GetTxs(filter, 1, 200, "asc")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txs.Count, txs.PageTotal, txs.PageNumber, txs.Limit, len(txs.Txs))

	rawTx := "0ae7010ae4010a2c2f73746166696875622e73746166696875622e6c65646765722e4d73674c6971756964697479556e626f6e6412b3010a2c73746166693176383730726b777a79716e61613274383779367873326168787573336a7a66766a61646679791241636f736d6f73316773746834367a35307732353670346b71333678717568347139306d666a713074346c6d3973636c6e367a75636736346570797175647a717a6d1a110a06757261746f6d120731303030303030222d636f736d6f733176383730726b777a79716e61613274383779367873326168787573336a7a6676666b6172737512660a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21027a8048f90cb2cbf59d40a66f5124aa378611a81e15789dcf76b6449bf14bfddf12040a02087f180612120a0c0a047566697312043333303610a88b0a1a4032dcf877c7d7ad9ef590fda6bbb13a7058041a656cef9d7cdc2a7d5c53ad60c058888b61362ccc8184bb553f53c72be7224d24ed908d28d6b8e2f1059d7254b6"
	txBts, err := hex.DecodeString(rawTx)
	txValue := txBts
	_, err = client.GetTxConfig().TxDecoder()(txValue)
	if err != nil {
		t.Fatal(err)
	}
	for page := 1; page < 40; page++ {
		fmt.Println("page: ", page)
		txs, err := client.GetTxs([]string{
			fmt.Sprintf("message.sender='%s'", "cosmos12yprrdprzat35zhqxe2fcnn3u26gwlt6xcq0pj"),
		}, page, 30, "desc")
		if err != nil {
			t.Fatal(err)
		}
		for _, tx := range txs.Txs {
			fmt.Println("tx ------------->")
			fmt.Println(tx.TxHash)
			txValue := tx.Tx.Value
			rawTx := "0ae7010ae4010a2c2f73746166696875622e73746166696875622e6c65646765722e4d73674c6971756964697479556e626f6e6412b3010a2c73746166693176383730726b777a79716e61613274383779367873326168787573336a7a66766a61646679791241636f736d6f73316773746834367a35307732353670346b71333678717568347139306d666a713074346c6d3973636c6e367a75636736346570797175647a717a6d1a110a06757261746f6d120731303030303030222d636f736d6f733176383730726b777a79716e61613274383779367873326168787573336a7a6676666b6172737512660a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21027a8048f90cb2cbf59d40a66f5124aa378611a81e15789dcf76b6449bf14bfddf12040a02087f180612120a0c0a047566697312043333303610a88b0a1a4032dcf877c7d7ad9ef590fda6bbb13a7058041a656cef9d7cdc2a7d5c53ad60c058888b61362ccc8184bb553f53c72be7224d24ed908d28d6b8e2f1059d7254b6"
			txBts, err := hex.DecodeString(rawTx)
			txValue = txBts
			decodeTx, err := client.GetTxConfig().TxDecoder()(txValue)
			if err != nil {
				t.Fatal(err)
			}

			err = decodeTx.ValidateBasic()
			if err != nil {
				t.Fatal(err)
			}

			for _, msg := range decodeTx.GetMsgs() {

				switch types.MsgTypeURL(msg) {

				case types.MsgTypeURL((*xStakingType.MsgDelegate)(nil)):
					fallthrough
				case types.MsgTypeURL((*xStakingType.MsgUndelegate)(nil)):
					fallthrough
				case types.MsgTypeURL((*xDistributionType.MsgWithdrawDelegatorReward)(nil)):
					fmt.Println(decodeTx.GetMsgs())
					fmt.Println(types.MsgTypeURL(msg))
					events := types.StringifyEvents(tx.Events)

					for _, event := range events {
						switch event.Type {
						case "delegate":

						case "transfer":
							// fmt.Println(event)
							if len(event.Attributes) == 6 {

								if event.Attributes[4].Value == "cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl" &&
									event.Attributes[3].Value == "cosmos12yprrdprzat35zhqxe2fcnn3u26gwlt6xcq0pj" {
									fmt.Println("reward -> ", event.Attributes[5].Value)
								}
							}
						}
					}
					poolAddr, _ := types.AccAddressFromBech32("cosmos12yprrdprzat35zhqxe2fcnn3u26gwlt6xcq0pj")
					balance, err := client.QueryBalance(poolAddr, "uatom", tx.Height+1)
					if err != nil {
						t.Fatal(err)
					}
					fmt.Println("balance: ", balance.Balance.Amount, "height: ", tx.Height)
					if balance.Balance.Amount.GT(types.NewInt(1000000000)) {
						t.Log(tx.TxHash, tx.Height+1)
					}
				}

			}
			txWithMemo, ok := decodeTx.(types.TxWithMemo)
			if ok {
				fmt.Println("txmemo: ", txWithMemo.GetMemo())
			}

		}
	}
}

func TestGetPubKey(t *testing.T) {
	initClient()
	test, _ := types.AccAddressFromBech32("cosmos1u22lut8qgqg8znxam72pwgqp8c09rnvme00kea")
	account, _ := client.QueryAccount(test)
	t.Log(hex.EncodeToString(account.GetPubKey().Bytes()))

}

func TestDecodeAddress(t *testing.T) {
	initClient()
	client.SetAccountPrefix("iaa")
	done := core.UseSdkConfigContext(client.GetAccountPrefix())
	address, err := types.AccAddressFromBech32("iaa15lne70yk254s0pm2da6g59r82cjymzjqz9sa5h")
	if err != nil {
		t.Fatal(err)
	}
	done()
	t.Log(hex.EncodeToString(address))
	client.SetAccountPrefix("stafi")
	done = core.UseSdkConfigContext(client.GetAccountPrefix())
	address2, err := types.AccAddressFromBech32("stafi15lne70yk254s0pm2da6g59r82cjymzjqvvqxz7")
	if err != nil {
		t.Fatal(err)
	}
	done()
	t.Log(hex.EncodeToString(address2))
}

func TestClient_Sign(t *testing.T) {
	initClient()
	bts, err := hex.DecodeString("0E4F8F8FF7A3B67121711DA17FBE5AE8CB25DB272DDBF7DC0E02122947266604")
	assert.NoError(t, err)
	sigs, pubkey, err := client.Sign("recipient", bts)
	assert.NoError(t, err)
	t.Log(hex.EncodeToString(sigs))
	//4c6902bda88424923c62f95b3e3ead40769edab4ec794108d1c18994fac90d490087815823bd1a8af3d6a0271538cef4622b4b500a6253d2bd4c80d38e95aa6d
	t.Log(hex.EncodeToString(pubkey.Bytes()))
	//02e7710b4f7147c10ad90da06b69d2d6b8ff46786ef55a3f1e889c33de2bf0b416
}

func TestAddress(t *testing.T) {
	addrKey1, _ := types.AccAddressFromBech32("cosmos1a8mg9rj4nklhmwkf5vva8dvtgx4ucd9yjasret")
	addrKey2, _ := types.AccAddressFromBech32("cosmos1ztquzhpkve7szl99jkugq4l8jtpnhln76aetam")
	addrKey3, _ := types.AccAddressFromBech32("cosmos12zz2hm02sxe9f4pwt7y5q9wjhcu98vnuwmjz4x")
	addrKey4, _ := types.AccAddressFromBech32("cosmos12yprrdprzat35zhqxe2fcnn3u26gwlt6xcq0pj")
	addrKey5, _ := types.AccAddressFromBech32("cosmos1em384d8ek3y8nlugapz7p5k5skg58j66je3las")
	t.Log(hex.EncodeToString(addrKey1.Bytes()))
	t.Log(hex.EncodeToString(addrKey2.Bytes()))
	t.Log(hex.EncodeToString(addrKey3.Bytes()))
	t.Log(hex.EncodeToString(addrKey4.Bytes()))
	t.Log(hex.EncodeToString(addrKey5.Bytes()))
	//client_test.go:347: e9f6828e559dbf7dbac9a319d3b58b41abcc34a4
	//client_test.go:348: 12c1c15c36667d017ca595b88057e792c33bfe7e
	//client_test.go:349: 5084abedea81b254d42e5f894015d2be3853b27c
}

func TestClient_QueryDelegations(t *testing.T) {
	initClient()
	addr, err := types.AccAddressFromBech32("swth10j3yjvgzm7r22us3tqz49gkgtkj0rt3pg6w8z7")
	assert.NoError(t, err)
	height := int64(38306830)
	res, err := client.QueryDelegations(addr, height)
	assert.NoError(t, err)
	// t.Log(res.String())
	for i, d := range res.GetDelegationResponses() {
		t.Log(i, d.Balance.Amount)
	}

	balance, err := client.QueryBalance(addr, "swth", height)
	assert.NoError(t, err)
	t.Log(balance.String())
}

func TestClient_QueryDelegationTotalRewards(t *testing.T) {
	initClient()
	addr, err := types.AccAddressFromBech32("swth10j3yjvgzm7r22us3tqz49gkgtkj0rt3pg6w8z7")
	assert.NoError(t, err)
	t.Log(client.GetDenom())
	res, err := client.QueryDelegationTotalRewards(addr, 38307252)
	assert.NoError(t, err)
	for i := range res.Rewards {
		t.Log(i, res.Rewards[i].Reward.AmountOf(client.GetDenom()))
		t.Log(i, res.Rewards[i].Reward.AmountOf(client.GetDenom()).TruncateInt())
	}
	t.Log("total ", res.GetTotal().AmountOf(client.GetDenom()).TruncateInt())
}

func TestMemo(t *testing.T) {
	// initClient()
	// res, err := client.QueryTxByHash("c7e3f7baf5a5f1d8cbc112080f32070dddd7cca5fe4272e06f8d42c17b25193f")
	// assert.NoError(t, err)
	s, ok := types.NewIntFromString("")
	assert.False(t, ok)
	t.Log(s)
	s2, ok := types.NewIntFromString("0")
	assert.True(t, ok)
	t.Log(s2)
	txBts, err := hex.DecodeString("")
	assert.NoError(t, err)
	tx, err := client.GetTxConfig().TxDecoder()(txBts)
	//tx, err := client.GetTxConfig().TxJSONDecoder()(res.Tx.Value)
	assert.NoError(t, err)
	memoTx, ok := tx.(types.TxWithMemo)
	assert.Equal(t, true, ok)
	t.Log(memoTx.GetMemo())
	hb, _ := hex.DecodeString("0xbebd0355ae360c8e6a7ed940a819838c66ca7b8f581f9c0e81dbb5faff346a30")
	//t.Log(string(hb))
	bonderAddr, _ := ss58.Encode(hb, ss58.StafiPrefix)
	t.Log(bonderAddr)
}

func TestToAddress(t *testing.T) {

	address, err := types.AccAddressFromHexUnsafe("76ec5242a51191b37bc1043d894c3ddce66e4020")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(address.String())
}

func TestMultiThread(t *testing.T) {
	initClient()
	wg := sync.WaitGroup{}
	wg.Add(50)

	for i := 0; i < 50; i++ {
		go func(i int) {
			t.Log(i)
			time.Sleep(5 * time.Second)
			height, err := client.GetAccount()
			if err != nil {
				t.Log("fail", i, err)
			} else {
				t.Log("success", i, height.GetSequence())
			}
			time.Sleep(15 * time.Second)
			height, err = client.GetAccount()
			if err != nil {
				t.Log("fail", i, err)
			} else {
				t.Log("success", i, height.GetSequence())
			}
			wg.Done()
		}(i)
	}
	wg.Wait()
}

func TestParseTx(t *testing.T) {
	initClient()
	// rawTx := "7b22626f6479223a7b226d65737361676573223a5b7b224074797065223a222f636f736d6f732e62616e6b2e763162657461312e4d73674d756c746953656e64222c22696e70757473223a5b7b2261646472657373223a22636f736d6f7331776d6b39797334397a78676d78373770717337636a6e70616d6e6e7875737071753272383779222c22636f696e73223a5b7b2264656e6f6d223a227561746f6d222c22616d6f756e74223a22313134373730227d5d7d5d2c226f757470757473223a5b7b2261646472657373223a22636f736d6f733135366b6b326b71747777776670733836673534377377646c7263326377367163746d36633877222c22636f696e73223a5b7b2264656e6f6d223a227561746f6d222c22616d6f756e74223a2231393936227d5d7d2c7b2261646472657373223a22636f736d6f73316b7579646538767074386330747934707871677877336d616b7365376d643830756d74687667222c22636f696e73223a5b7b2264656e6f6d223a227561746f6d222c22616d6f756e74223a223939383030227d5d7d2c7b2261646472657373223a22636f736d6f73316a6b6b68666c753871656471743463796173643674673730676a7778346a6b6872736536727a222c22636f696e73223a5b7b2264656e6f6d223a227561746f6d222c22616d6f756e74223a223132393734227d5d7d5d7d5d2c226d656d6f223a22222c2274696d656f75745f686569676874223a2230222c22657874656e73696f6e5f6f7074696f6e73223a5b5d2c226e6f6e5f637269746963616c5f657874656e73696f6e5f6f7074696f6e73223a5b5d7d2c22617574685f696e666f223a7b227369676e65725f696e666f73223a5b5d2c22666565223a7b22616d6f756e74223a5b7b2264656e6f6d223a227561746f6d222c22616d6f756e74223a2237353030227d5d2c226761735f6c696d6974223a2231353030303030222c227061796572223a22222c226772616e746572223a22227d7d2c227369676e617475726573223a5b5d7d"
	// rawTx := "7b22626f6479223a7b226d65737361676573223a5b7b224074797065223a222f636f736d6f732e7374616b696e672e763162657461312e4d7367556e64656c6567617465222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661313634726c377961787a6e7a7632647166716730347771797064677079793263396b6a74703870222c22616d6f756e74223a7b2264656e6f6d223a227569726973222c22616d6f756e74223a2239383938303638373830227d7d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661317070306d3339727133376d74636764647939736c706e307333327277773671366e76646b6b39227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661313466667a3935367374657a326b67716c767a3067333432666b74733235686e64716361617166227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a226976613175616c687533666a6767373767343835676d7973776b713377306470376779736c3875397366227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a226976613171367a707361336a3834353264367137746b6d6e646b6a66677a726d7a776d736d6c37667967227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a2269766131676a78797366357832716e6874326a7933746565656e657a38343277386a3268716675377471227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a2269766131326c786c306672796377336a667630373363747178347330767a63687a733332736d34387974227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661317364306565766177786e73366e667561763876376c647164356b37646e727368333571766866227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a226976613133723577387473303337306375726d303935756b35376e38397a323675656e3075656b77376a227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661313374683370666b6d6a7170646567767a39633536397930617368776d79703363356d73397937227d5d2c226d656d6f223a2231393138393a68616e646c65457261506f6f6c557064617465644576656e74222c2274696d656f75745f686569676874223a2230222c22657874656e73696f6e5f6f7074696f6e73223a5b5d2c226e6f6e5f637269746963616c5f657874656e73696f6e5f6f7074696f6e73223a5b5d7d2c22617574685f696e666f223a7b227369676e65725f696e666f73223a5b5d2c22666565223a7b22616d6f756e74223a5b7b2264656e6f6d223a227569726973222c22616d6f756e74223a223135303030227d5d2c226761735f6c696d6974223a2231353030303030222c227061796572223a22222c226772616e746572223a22227d7d2c227369676e617475726573223a5b5d7d"
	// rawTx := "7b22626f6479223a7b226d65737361676573223a5b7b224074797065223a222f636f736d6f732e7374616b696e672e763162657461312e4d7367556e64656c6567617465222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661313634726c377961787a6e7a7632647166716730347771797064677079793263396b6a74703870222c22616d6f756e74223a7b2264656e6f6d223a227569726973222c22616d6f756e74223a2239383938303638373830227d7d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a226976613171367a707361336a3834353264367137746b6d6e646b6a66677a726d7a776d736d6c37667967227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661317070306d3339727133376d74636764647939736c706e307333327277773671366e76646b6b39227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a2269766131676a78797366357832716e6874326a7933746565656e657a38343277386a3268716675377471227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a2269766131326c786c306672796377336a667630373363747178347330767a63687a733332736d34387974227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661317364306565766177786e73366e667561763876376c647164356b37646e727368333571766866227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a226976613133723577387473303337306375726d303935756b35376e38397a323675656e3075656b77376a227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661313374683370666b6d6a7170646567767a39633536397930617368776d79703363356d73397937227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661313466667a3935367374657a326b67716c767a3067333432666b74733235686e64716361617166227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a226976613175616c687533666a6767373767343835676d7973776b713377306470376779736c3875397366227d5d2c226d656d6f223a2231393138393a68616e646c65457261506f6f6c557064617465644576656e74222c2274696d656f75745f686569676874223a2230222c22657874656e73696f6e5f6f7074696f6e73223a5b5d2c226e6f6e5f637269746963616c5f657874656e73696f6e5f6f7074696f6e73223a5b5d7d2c22617574685f696e666f223a7b227369676e65725f696e666f73223a5b5d2c22666565223a7b22616d6f756e74223a5b7b2264656e6f6d223a227569726973222c22616d6f756e74223a223135303030227d5d2c226761735f6c696d6974223a2231353030303030222c227061796572223a22222c226772616e746572223a22227d7d2c227369676e617475726573223a5b5d7d"
	// rawTx := "7b22626f6479223a7b226d65737361676573223a5b7b224074797065223a222f636f736d6f732e7374616b696e672e763162657461312e4d7367556e64656c6567617465222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661313634726c377961787a6e7a7632647166716730347771797064677079793263396b6a74703870222c22616d6f756e74223a7b2264656e6f6d223a227569726973222c22616d6f756e74223a2239383938303638373830227d7d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a2269766131676a78797366357832716e6874326a7933746565656e657a38343277386a3268716675377471227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a226976613133723577387473303337306375726d303935756b35376e38397a323675656e3075656b77376a227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661313374683370666b6d6a7170646567767a39633536397930617368776d79703363356d73397937227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a226976613175616c687533666a6767373767343835676d7973776b713377306470376779736c3875397366227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a226976613171367a707361336a3834353264367137746b6d6e646b6a66677a726d7a776d736d6c37667967227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661317070306d3339727133376d74636764647939736c706e307333327277773671366e76646b6b39227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a2269766131326c786c306672796377336a667630373363747178347330767a63687a733332736d34387974227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661317364306565766177786e73366e667561763876376c647164356b37646e727368333571766866227d2c7b224074797065223a222f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f72526577617264222c2264656c656761746f725f61646472657373223a22696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232222c2276616c696461746f725f61646472657373223a22697661313466667a3935367374657a326b67716c767a3067333432666b74733235686e64716361617166227d5d2c226d656d6f223a2231393138393a68616e646c65457261506f6f6c557064617465644576656e74222c2274696d656f75745f686569676874223a2230222c22657874656e73696f6e5f6f7074696f6e73223a5b5d2c226e6f6e5f637269746963616c5f657874656e73696f6e5f6f7074696f6e73223a5b5d7d2c22617574685f696e666f223a7b227369676e65725f696e666f73223a5b5d2c22666565223a7b22616d6f756e74223a5b7b2264656e6f6d223a227569726973222c22616d6f756e74223a223135303030227d5d2c226761735f6c696d6974223a2231353030303030222c227061796572223a22222c226772616e746572223a22227d7d2c227369676e617475726573223a5b5d7d"
	// rawTx:="7b22626f6479223a7b226d65737361676573223a5b7b224074797065223a222f636f736d6f732e62616e6b2e763162657461312e4d73674d756c746953656e64222c22696e70757473223a5b7b2261646472657373223a22636f736d6f7331776d6b39797334397a78676d78373770717337636a6e70616d6e6e7875737071753272383779222c22636f696e73223a5b7b2264656e6f6d223a227561746f6d222c22616d6f756e74223a22313134373730227d5d7d5d2c226f757470757473223a5b7b2261646472657373223a22636f736d6f73316a6b6b68666c753871656471743463796173643674673730676a7778346a6b6872736536727a222c22636f696e73223a5b7b2264656e6f6d223a227561746f6d222c22616d6f756e74223a223132393734227d5d7d2c7b2261646472657373223a22636f736d6f733135366b6b326b71747777776670733836673534377377646c7263326377367163746d36633877222c22636f696e73223a5b7b2264656e6f6d223a227561746f6d222c22616d6f756e74223a2231393936227d5d7d2c7b2261646472657373223a22636f736d6f73316b7579646538767074386330747934707871677877336d616b7365376d643830756d74687667222c22636f696e73223a5b7b2264656e6f6d223a227561746f6d222c22616d6f756e74223a223939383030227d5d7d5d7d5d2c226d656d6f223a22222c2274696d656f75745f686569676874223a2230222c22657874656e73696f6e5f6f7074696f6e73223a5b5d2c226e6f6e5f637269746963616c5f657874656e73696f6e5f6f7074696f6e73223a5b5d7d2c22617574685f696e666f223a7b227369676e65725f696e666f73223a5b5d2c22666565223a7b22616d6f756e74223a5b7b2264656e6f6d223a227561746f6d222c22616d6f756e74223a2237353030227d5d2c226761735f6c696d6974223a2231353030303030222c227061796572223a22222c226772616e746572223a22227d7d2c227369676e617475726573223a5b5d7d"
	// rawTx := "0afd0b0a93010a372f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f7252657761726412580a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a6976613171367a707361336a3834353264367137746b6d6e646b6a66677a726d7a776d736d6c376679670a93010a372f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f7252657761726412580a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a697661317070306d3339727133376d74636764647939736c706e307333327277773671366e76646b6b390a93010a372f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f7252657761726412580a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a69766131676a78797366357832716e6874326a7933746565656e657a38343277386a32687166753774710a93010a372f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f7252657761726412580a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a69766131326c786c306672796377336a667630373363747178347330767a63687a733332736d343879740a93010a372f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f7252657761726412580a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a697661317364306565766177786e73366e667561763876376c647164356b37646e7273683335717668660a93010a372f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f7252657761726412580a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a6976613133723577387473303337306375726d303935756b35376e38397a323675656e3075656b77376a0a93010a372f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f7252657761726412580a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a697661313374683370666b6d6a7170646567767a39633536397930617368776d79703363356d733979370a93010a372f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f7252657761726412580a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a697661313466667a3935367374657a326b67716c767a3067333432666b74733235686e647163616171660a93010a372f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f7252657761726412580a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a697661313634726c377961787a6e7a7632647166716730347771797064677079793263396b6a747038700a93010a372f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f7252657761726412580a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a6976613175616c687533666a6767373767343835676d7973776b713377306470376779736c3875397366121f31393236353a68616e646c65457261506f6f6c557064617465644576656e7412ea040ad1040aa8040a292f636f736d6f732e63727970746f2e6d756c74697369672e4c6567616379416d696e6f5075624b657912fa03080412460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21020ef510335461383044c01696fb3598e6a23d84547cbde621700d53862daf834b12460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21022603a05aca3b5e5cbf79d9a8bcb0b01207085961af3356710a33c3738d55c3c412460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21023d8ba0482f0926f1aab728a16ea4792041ef6c644dc3b4ae09c92a761b2171b712460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2103a77b5def1de568d50b53ecb75cbb9144b20676193db349ffbe75e4631f93f26712460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2102a3bea6926b494f58306f4f7eef436acb9da57ff158b4498b6a0bb1a5324f38d812460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a210277715dccf2172b74d1463ec4eb31ad66fbffbfc5d77ead22e6648c8fa057d7be12460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2102c986df46e7ddd5b0c637a485d6e6cabad85e9c87ba32822fdd3f7314f2021af01221121f0a0508071201b412040a02087f12040a02087f12040a02087f12040a02087f18b60112140a0e0a0575697269731205313530303010e0c65b1a88020a40900d83c01daf57b5e1afd5d0709f23b5bf9d747bcc7e796b04091ba1e064d7ed7454eec48a6c17d9acff381da04a48afc20b4c27b5d8e0c4b2a1c742bb42d8a80a4071c47979e8217aa6d7fa362a30b2e1461733a475603fbd81af18eceec85816da303aa209fc0273648cc152c4fb19869dba8ee29cd2899461d8140bdf8ba3b9820a40b782ac0685a4a50ae5eaae4199f310558a4799439a96c425cf6db3b298487f9d05c2332ec08f8dcb60d14feb82bd374c0862b3f8e546aac26a13e609963969500a4083d27d525a070eaf7be228aa55a0359187459fe96934bfe3dedd84b18085d8ba5430608a971b648d7fe2c577131633fc0a036b0287202296033af11bbfe93c23"
	rawTx := "0afb0b0a93010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465126c0a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a6976613171367a707361336a3834353264367137746b6d6e646b6a66677a726d7a776d736d6c376679671a120a05756972697312093238373536333235310a93010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465126c0a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a697661317070306d3339727133376d74636764647939736c706e307333327277773671366e76646b6b391a120a05756972697312093237383739323231390a93010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465126c0a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a69766131676a78797366357832716e6874326a7933746565656e657a38343277386a32687166753774711a120a05756972697312093236383333383338350a93010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465126c0a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a69766131326c786c306672796377336a667630373363747178347330767a63687a733332736d343879741a120a05756972697312093238383233333237300a93010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465126c0a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a697661317364306565766177786e73366e667561763876376c647164356b37646e7273683335717668661a120a05756972697312093237343432363539360a93010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465126c0a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a6976613133723577387473303337306375726d303935756b35376e38397a323675656e3075656b77376a1a120a05756972697312093236373431323936350a93010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465126c0a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a697661313374683370666b6d6a7170646567767a39633536397930617368776d79703363356d733979371a120a05756972697312093238303430363333330a93010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465126c0a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a697661313466667a3935367374657a326b67716c767a3067333432666b74733235686e647163616171661a120a05756972697312093238383234303531340a93010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465126c0a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a697661313634726c377961787a6e7a7632647166716730347771797064677079793263396b6a747038701a120a05756972697312093236343336393630330a93010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465126c0a2a696161317776707a72617337616333726d336d773936646a6865397438646836757136746337366d7232122a6976613175616c687533666a6767373767343835676d7973776b713377306470376779736c38753973661a120a0575697269731209323732303936303038121d31393236353a68616e646c65426f6e645265706f727465644576656e7412ea040ad1040aa8040a292f636f736d6f732e63727970746f2e6d756c74697369672e4c6567616379416d696e6f5075624b657912fa03080412460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21020ef510335461383044c01696fb3598e6a23d84547cbde621700d53862daf834b12460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21022603a05aca3b5e5cbf79d9a8bcb0b01207085961af3356710a33c3738d55c3c412460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21023d8ba0482f0926f1aab728a16ea4792041ef6c644dc3b4ae09c92a761b2171b712460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2103a77b5def1de568d50b53ecb75cbb9144b20676193db349ffbe75e4631f93f26712460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2102a3bea6926b494f58306f4f7eef436acb9da57ff158b4498b6a0bb1a5324f38d812460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a210277715dccf2172b74d1463ec4eb31ad66fbffbfc5d77ead22e6648c8fa057d7be12460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a2102c986df46e7ddd5b0c637a485d6e6cabad85e9c87ba32822fdd3f7314f2021af01221121f0a0508071201b212040a02087f12040a02087f12040a02087f12040a02087f18b70112140a0e0a0575697269731205313530303010e0c65b1a88020a400fa7de5a7fe96a30968d133185f59a6120bfecd62a3c81ab59a3cf39ea9a44db4949282b8aa118bbae920642c2a5917c8fe974607c4892ea4789566eb01cb1ce0a40755ee18b75a3692c2997a83ae28de9f8084bfb617292ecda000bc5768999b7d3421b7274d7a6c08b0f4dea76d007d850824d49da5070492fa4a86f7fd7fad1c40a40b1048f13965a751a5762e08b2d1528156994af27b539cfbce5a7bc05e93d86017ccf818868d4ef6886adf01043fd65abc0a825b9359482109294b91c1ac72cba0a40656ab6475f5b1c62c7583661074f5cf4113a10a3769073ba0f9024a488872b002cf96f12217c61abfa87b4aa6626d5b3480b313697c2e1753970686d3b6d02b0"
	txBts, err := hex.DecodeString(rawTx)
	if err != nil {
		t.Fatal(err)
	}
	tx, err := client.GetTxConfig().TxDecoder()(txBts)
	if err != nil {
		panic(err)
	}
	txJson, err := client.GetTxConfig().TxJSONEncoder()(tx)
	if err != nil {
		panic(err)
	}

	t.Log(string(txJson))
}

func TestGetValidators(t *testing.T) {
	initClient()
	res, err := client.QueryValidators(12510587)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(res.Validators)
	t.Log(len(res.Validators))
}

func TestGetBlockResults(t *testing.T) {
	initClient()
	t.Log(types.AccAddress(crypto.AddressHash([]byte("distribution"))).String())
	result, err := client.GetBlockResults(12510587)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(types.StringifyEvents(result.BeginBlockEvents))

}

func TestQueryRedelegations(t *testing.T) {
	initClient()
	res, err := client.QueryReDelegations("cosmos1wmk9ys49zxgmx77pqs7cjnpamnnxuspqu2r87y", "", "", 0)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(res.Pagination.Total)
}

func TestWithdraw(t *testing.T) {
	initClient()
	balance, err := client.QueryBalance(client.GetFromAddress(), "stake", 0)
	if err != nil {
		t.Fatal(err)
	}
	t.Log("balance", balance)

	delegations, err := client.QueryDelegations(client.GetFromAddress(), 0)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(delegations)

	valAddr, err := types.ValAddressFromBech32(delegations.DelegationResponses[0].Delegation.ValidatorAddress)
	if err != nil {
		t.Fatal(err)
	}

	rewards, err := client.QueryDelegationRewards(client.GetFromAddress(), valAddr, 0)
	if err != nil {
		t.Fatal(err)
	}

	t.Log("rewards", rewards)

	reward := rewards.Rewards.AmountOf("stake").TruncateInt()

	msgs := make([]types.Msg, 0)
	msgs = append(msgs, xStakingType.NewMsgDelegate(client.GetFromAddress(), valAddr, types.NewCoin("stake", reward)))
	// msgs = append(msgs, xDistributionType.NewMsgWithdrawDelegatorReward(client.GetFromAddress(), valAddr))

	txbts, err := client.ConstructAndSignTx(msgs...)
	if err != nil {
		t.Fatal(err)
	}

	txHash, err := client.BroadcastTx(txbts)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txHash)

}

func TestQueryVotes(t *testing.T) {
	initClient()
	votesRes, err := client.QueryVotes(72, 11214988, 1, 10, true)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(votesRes)
	voter := votesRes.Votes[0].Voter
	voter = "cosmos1zp0fgmh3sf3lls3xqy5xtax2m98l778mzgtlru"
	txs, err := client.GetTxs([]string{
		fmt.Sprintf("message.sender='%s'", voter),
		fmt.Sprintf("proposal_vote.proposal_id='%d'", 72),
	}, 1, 2, "desc")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txs)
}

func TestQueryDelegations(t *testing.T) {
	initClient()

	delegator, _ := types.AccAddressFromBech32("cosmos1qtnr8xvcrv8daxy32yz2g6v9g69lwlh5rph4t4")
	delegations, err := client.QueryDelegationsNoLock(delegator, 11056795)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(delegations)
}

func TestGetTxs(t *testing.T) {
	initClient()

	txs, err := client.GetBlockTxsWithParseErrSkip(8711350)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(txs)
	t.Log(len(txs))

	for _, tx := range txs {
		for _, e := range tx.Events {
			for _, a := range e.Attributes {

				t.Log(e.Type, a.Key, a.Value)
			}
		}
	}
}
